package com.company.Game;

import java.util.ArrayList;

public class MapParts {


    // - - - Variables - - -
    private ArrayList<double[][]> myParts;
    // - - - - - - - - - - -



    public MapParts() {
        this.myParts = new ArrayList<double[][]>();

        // Teil_1 - lowJump
        double[][] Tile_1 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,  -0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	}	}	;
        this.myParts.add(Tile_1);

        // Teil_2 - Trap
        double[][] Tile_2 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_2);

        // Teil_3 - HighJump
        double[][] Tile_3 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.6,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.7,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.8,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_3);

        // Teil_4 - multiple Jumps
        double[][] Tile_4 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_4);

        // Teil_5 - Jump & Fall 1
        double[][] Tile_5 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_5);

        // Teil_6 - Jump & Fall 2
        double[][] Tile_6 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_6);

        // Teil_7 - Jump & Fall 3
        double[][] Tile_7 = {
                {	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.25, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, },
                { 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.5, 	-0.5, 	-0.5, 	-0.5, },
                { 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.25, 	-0.5, 	-0.25, 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.25, 	-0.5, 	-0.5, 	-0.5, 	-0.5, },
                { 	-0.5, 	-0.5, 	-0.5, 	-0.5, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.5, 	-0.5, 	-0.5, 	-0.5, },
                { 	-0.25, 	-0.25, 	-0.25, 	-0.25, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.25, 	-0.5, 	-0.25, 	-0.25, 	-0.25, 	-0.25, 	-0.25, 	-0.25 } };
        this.myParts.add(Tile_7);

        // Teil_8 - Future 1
        double[][] Tile_8 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_8);

        // Teil_9 - Future 2
        double[][] Tile_9 =  {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_9);

        // Teil_10 - Future 3
        double[][] Tile_10 =  {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.6,	 -0.7,	 -0.8,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.6,	 -0.7,	 -0.8,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.6,	 -0.7,	 -0.8,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.6,	 -0.7,	 -0.8,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.6,	 -0.7,	 -0.8,	 -0.9,	-0.25,	-0.25,	-0.25	}	}	;
        this.myParts.add(Tile_10);

        // Teil_11 - Future 4
        double[][] Tile_11 = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.26,	 -0.5,	 -0.5,	-0.25,	-0.26,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.26,	 -0.5,	 -0.5,	-0.25,	-0.26,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.3,	 -0.4,	 -0.5,	 -0.6,	 -0.7,	 -0.8,	 -0.9,	 -0.10,	 -0.11,	 -0.12,	 -0.13,	 -0.14,	 -0.15,	-0.23,	-0.24,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	}	}	;
        this.myParts.add(Tile_11);

        // Teil_12 - Future all
        double[][] Tile_all = {
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	}	,
                {	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	 -0.5,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	-0.25,	}	}	;
        this.myParts.add(Tile_all);

    }



    private double [] [] getTile (int index) {
        double [] [] myReturn = new double [0] [0];
        if ( (index < this.myParts.size()) && (index >= 0) ) {
            myReturn = this.myParts.get(index);
        }
        return myReturn;
    }



    public double [] [] appendTile (double [] [] oldMap, int indexToAppend) {
        double [] [] newTile = getTile (indexToAppend);
        if (newTile.length == 0) {
            return oldMap;
        } else {
            double [] [] myReturn = new double [oldMap.length] [oldMap[0].length + newTile[0].length];

            // copy old
            for (int i0 = 0; i0 < oldMap.length; i0++) {
                for (int i1 = 0; i1 < oldMap[0].length; i1++) {
                    myReturn [i0] [i1] = oldMap [i0] [i1];
                }
            }

            // add new
            for (int i0 = 0; i0 < oldMap.length; i0++) {
                for (int i1 = oldMap[0].length; i1 < (oldMap[0].length + newTile[0].length); i1++) {
                    myReturn [i0] [i1] = newTile [i0] [i1-oldMap[0].length];
                }
            }

            return myReturn;
        }
    }



    public void printMap (double [] [] map) {
        System.out.println();
        for (int i0 = 0; i0 < map.length; i0++) {
            for (int i1 = 0; i1 < map[0].length; i1++) {
                System.out.print(+ map[i0][i1] + "\t");
            }
            System.out.println();
        }
        System.out.println();
    }


}
